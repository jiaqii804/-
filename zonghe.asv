%% 此程序为多特征输入，单步预测CEEMDAN-VMD-BILSTM
clc;
clear
close all
X = xlsread('风电场预测.xlsx');
X = X(5665:8640,:);  %选取3月份数据，最后一列要是预测值哦
load Co_data.mat
IMF = Co_data';
disp('…………………………………………………………………………………………………………………………')
disp('CEEMDAN-VMD-biLSTM预测')
disp('…………………………………………………………………………………………………………………………')

%% 对每个分量建模
for uu=1:size(IMF,2)
    X_imf=[X(:,1:end-1),IMF(:,uu)];


    n_in = 5;  % 输入前5个时刻的数据
    n_out = 1 ; % 此程序为单步预测，因此请将n_out设置为1
    or_dim = size(X,2) ;       % 记录特征数据维度
    num_samples = length(X_imf)- n_in; % 样本个数
    scroll_window = 1;  %如果等于1，下一个数据从第二行开始取。如果等于2，下一个数据从第三行开始取
    [res] = data_collation(X_imf, n_in, n_out, or_dim, scroll_window, num_samples);


    % 训练集和测试集划分%% 来自：公众号《淘个代码》

    num_size = 0.8;                              % 训练集占数据集比例  %% 来自：公众号《淘个代码》
    num_train_s = round(num_size * num_samples); % 训练集样本个数  %% 来自：公众号《淘个代码》

    %% 以下几行代码是为了方便归一化，一般不需要更改！
    P_train = res(1: num_train_s,1);
    P_train = reshape(cell2mat(P_train)',n_in*or_dim,num_train_s);
    T_train = res(1: num_train_s,2);
    T_train = cell2mat(T_train)';

    P_test = res(num_train_s+1: end,1);
    P_test = reshape(cell2mat(P_test)',n_in*or_dim,num_samples-num_train_s);
    T_test = res(num_train_s+1: end,2);
    T_test = cell2mat(T_test)';


    %  数据归一化
    [p_train, ps_input] = mapminmax(P_train, 0, 1);
    p_test = mapminmax('apply', P_test, ps_input);

    [t_train, ps_output] = mapminmax(T_train, 0, 1);
    t_test = mapminmax('apply', T_test, ps_output);

    vp_train = reshape(p_train,n_in,or_dim,num_train_s);
    vp_test = reshape(p_test,n_in,or_dim,num_samples-num_train_s);

    vt_train = t_train;
    vt_test = t_test;

    f_ = [size(vp_train,1) size(vp_train,2)];
    outdim = n_out;

    numFeatures = size(p_train,1);
    %%
    layers0 = [ ...
    sequenceInputLayer(f_)              % 输入层
    flattenLayer
    bilstmLayer(25)                      
    reluLayer                           
    fullyConnectedLayer(outdim)         % 回归层
    regressionLayer];
    
    %% Set the hyper parameters for unet training
    options0 = trainingOptions('adam', ...                 % 优化算法Adam
        'MaxEpochs', 150, ...                            % 最大训练次数
        'GradientThreshold', 1, ...                       % 梯度阈值
        'InitialLearnRate', 0.001, ...         % 初始学习率
        'LearnRateSchedule', 'piecewise', ...             % 学习率调整
        'LearnRateDropPeriod',120, ...                   % 训练100次后开始调整学习率
        'LearnRateDropFactor',0.01, ...                    % 学习率调整因子
        'L2Regularization', 0.00001, ...         % 正则化参数
        'ExecutionEnvironment', 'cpu',...                 % 训练环境
        'Verbose', 1, ...                                 % 关闭优化过程
        'Plots', 'none');                    % 画出曲线
    % % start training
    %  训练
    net = trainNetwork(vp_train, vt_train, layers0, options0);
    %analyzeNetwork(net);% 查看网络结构
    %  预测
    t_sim1 = predict(net, vp_train); 
    t_sim2 = predict(net, vp_test); 

    %  数据反归一化
    T_sim1 = mapminmax('reverse', t_sim1, ps_output);
    T_sim2 = mapminmax('reverse', t_sim2, ps_output);

    %  数据格式转换
    imf_T_sim1(:,uu) = double(T_sim1');% cell2mat将cell元胞数组转换为普通数组
    imf_T_sim2(:,uu) = double(T_sim2');
end

%% 重构出到真实的测试集与训练集
[res] = data_collation(X, n_in, n_out, or_dim, scroll_window, num_samples);
% 训练集和测试集划分%% 来自：公众号《淘个代码》
%% 以下几行代码是为了方便归一化，一般不需要更改！
T_train = res(1: num_train_s,2);
T_train = cell2mat(T_train)';

T_test = res(num_train_s+1: end,2);
T_test = cell2mat(T_test)';

%% 各分量预测的结果相加
T_sim_a = sum(imf_T_sim1,2);
T_sim_b = sum(imf_T_sim2,2);


% 指标计算
disp('…………训练集误差指标…………')
[mae1,rmse1,mape1,error1]=calc_error(T_train,T_sim_a');
fprintf('\n')

figure('Position',[200,300,600,200])
plot(T_train);
hold on
plot(T_sim_a')
legend('真实值','预测值')
title('CEEMDAN-VMD-CNN-biLSTM训练集预测效果对比')
xlabel('样本点')
ylabel('发电功率')

disp('…………测试集误差指标…………')
[mae2,rmse2,mape2,error2]=calc_error(T_test,T_sim_b');
fprintf('\n')


figure('Position',[200,300,600,200])
plot(T_test);
hold on
plot(T_sim_b')
legend('真实值','预测值')
title('CEEMDAN-VMD-biLSTM预测集预测效果对比')
xlabel('样本点')
ylabel('发电功率')

figure('Position',[200,300,600,200])
plot(T_sim_b'-T_test)
title('CEEMDAN-VMD-CNN-biLSTM-误差曲线图')
xlabel('样本点')
ylabel('发电功率')

%% 此程序为多特征输入，单步预测CEEMDAN-VMD-CNN
tic
X = xlsread('风电场预测.xlsx');
X = X(5665:8640,:);  %选取3月份数据，最后一列要是预测值哦
load Co_data.mat
IMF = Co_data';
disp('…………………………………………………………………………………………………………………………')
disp('CEEMDAN-VMD-CNN预测')
disp('…………………………………………………………………………………………………………………………')

%% 对每个分量建模
for uu=1:size(IMF,2)
    disp(['第',num2str(uu),'个分量建模']) 
    X_imf=[X(:,1:end-1),IMF(:,uu)];


    n_in = 5;  % 输入前5个时刻的数据
    n_out = 1 ; % 此程序为单步预测，因此请将n_out设置为1
    or_dim = size(X,2) ;       % 记录特征数据维度
    num_samples = length(X_imf)- n_in; % 样本个数
    scroll_window = 1;  %如果等于1，下一个数据从第二行开始取。如果等于2，下一个数据从第三行开始取
    [res] = data_collation(X_imf, n_in, n_out, or_dim, scroll_window, num_samples);


    % 训练集和测试集划分%% 来自：公众号《淘个代码》

    num_size = 0.8;                              % 训练集占数据集比例  %% 来自：公众号《淘个代码》
    num_train_s = round(num_size * num_samples); % 训练集样本个数  %% 来自：公众号《淘个代码》

    %% 以下几行代码是为了方便归一化，一般不需要更改！
    P_train = res(1: num_train_s,1);
    P_train = reshape(cell2mat(P_train)',n_in*or_dim,num_train_s);
    T_train = res(1: num_train_s,2);
    T_train = cell2mat(T_train)';

    P_test = res(num_train_s+1: end,1);
    P_test = reshape(cell2mat(P_test)',n_in*or_dim,num_samples-num_train_s);
    T_test = res(num_train_s+1: end,2);
    T_test = cell2mat(T_test)';


    %  数据归一化
    [p_train, ps_input] = mapminmax(P_train, 0, 1);
    p_test = mapminmax('apply', P_test, ps_input);

    [t_train, ps_output] = mapminmax(T_train, 0, 1);
    t_test = mapminmax('apply', T_test, ps_output);
    
    %%  数据平铺
    trainD =  double(reshape(p_train,size(p_train,1),1,1,size(p_train,2)));
    testD  =  double(reshape(p_test,size(p_test,1),1,1,size(p_test,2)));
    targetD =  t_train;
    targetD_test  =  t_test;


    numFeatures = size(p_train,1);

    layers0 = [ ...
        % 输入特征
        sequenceInputLayer([numFeatures,1,1],'name','input')   %输入层设置
        sequenceFoldingLayer('name','fold')         %使用序列折叠层对图像序列的时间步长进行独立的卷积运算。
        % CNN特征提取
        convolution2dLayer([3,1],16,'Stride',[1,1],'name','conv1')  %添加卷积层，64，1表示过滤器大小，10过滤器个数，Stride是垂直和水平过滤的步长
        batchNormalizationLayer('name','batchnorm1')  % BN层，用于加速训练过程，防止梯度消失或梯度爆炸
        reluLayer('name','relu1')       % ReLU激活层，用于保持输出的非线性性及修正梯度的问题
        % 池化层
        maxPooling2dLayer([2,1],'Stride',2,'Padding','same','name','maxpool')   % 第一层池化层，包括3x3大小的池化窗口，步长为1，same填充方式
        % 展开层
        sequenceUnfoldingLayer('name','unfold')       %独立的卷积运行结束后，要将序列恢复
        %平滑层
        flattenLayer('name','flatten')
        dropoutLayer(0.1,'name','dropout_1')        % Dropout层，以概率为0.2丢弃输入

        fullyConnectedLayer(1,'name','fullconnect')   % 全连接层设置（影响输出维度）（cell层出来的输出层） %
        regressionLayer('Name','output')    ];

    lgraph0 = layerGraph(layers0);
    lgraph0 = connectLayers(lgraph0,'fold/miniBatchSize','unfold/miniBatchSize');


    %% Set the hyper parameters for unet training
    options0 = trainingOptions('adam', ...                 % 优化算法Adam
        'MaxEpochs', 150, ...                            % 最大训练次数
        'GradientThreshold', 1, ...                       % 梯度阈值
        'InitialLearnRate', 0.001, ...         % 初始学习率
        'LearnRateSchedule', 'piecewise', ...             % 学习率调整
        'LearnRateDropPeriod',120, ...                   % 训练100次后开始调整学习率
        'LearnRateDropFactor',0.01, ...                    % 学习率调整因子
        'L2Regularization', 0.00001, ...         % 正则化参数
        'ExecutionEnvironment', 'cpu',...                 % 训练环境
        'Verbose', 1, ...                                 % 关闭优化过程
        'Plots', 'none');                    % 画出曲线
    % % start training
    %  训练
    net = trainNetwork(trainD,targetD,lgraph0,options0);
    %analyzeNetwork(net);% 查看网络结构
    %  预测
    t_sim1 = predict(net, trainD);
    t_sim2 = predict(net, testD);

    %  数据反归一化
    T_sim1 = mapminmax('reverse', t_sim1, ps_output);
    T_sim2 = mapminmax('reverse', t_sim2, ps_output);

    %  数据格式转换
    imf_T_sim1(:,uu) = double(T_sim1');% cell2mat将cell元胞数组转换为普通数组
    imf_T_sim2(:,uu) = double(T_sim2');
end

%% 重构出到真实的测试集与训练集
[res] = data_collation(X, n_in, n_out, or_dim, scroll_window, num_samples);
% 训练集和测试集划分%% 来自：公众号《淘个代码》
%% 以下几行代码是为了方便归一化，一般不需要更改！
T_train = res(1: num_train_s,2);
T_train = cell2mat(T_train)';

T_test = res(num_train_s+1: end,2);
T_test = cell2mat(T_test)';

%% 各分量预测的结果相加
T_sim_a = sum(imf_T_sim1,2);
T_sim_b = sum(imf_T_sim2,2);


% 指标计算
disp('…………训练集误差指标…………')
[mae3,rmse3,mape3,error3]=calc_error(T_train,T_sim_a');
fprintf('\n')

figure('Position',[200,300,600,200])
plot(T_train);
hold on
plot(T_sim_a')
legend('真实值','预测值')
title('CEEMDAN-VMD-CNN训练集预测效果对比')
xlabel('样本点')
ylabel('发电功率')

disp('…………测试集误差指标…………')
[mae4,rmse4,mape4,error4]=calc_error(T_test,T_sim_b');
fprintf('\n')


figure('Position',[200,300,600,200])
plot(T_test);
hold on
plot(T_sim_b')
legend('真实值','预测值')
title('CEEMDAN-VMD-CNN-biLSTM预测集预测效果对比')
xlabel('样本点')
ylabel('发电功率')

figure('Position',[200,300,600,200])
plot(T_sim_b'-T_test)
title('CEEMDAN-VMD-CNN-biLSTM-误差曲线图')
xlabel('样本点')
ylabel('发电功率')

%% 此程序为多特征输入，单步预测CEEMDAN-VMD-CNN-BILSTM
%/////////////////////////////////////////////////////////////////////////////////
tic
clc;
X = xlsread('风电场预测.xlsx');
X = X(5665:8640,:);  %选取3月份数据，最后一列要是预测值哦
load Co_data.mat
IMF = Co_data';
disp('…………………………………………………………………………………………………………………………')
disp('CEEMDAN-VMD-CNNbiLSTM预测')
disp('…………………………………………………………………………………………………………………………')

%% 对每个分量建模
for uu=1:size(IMF,2)
    disp(['第',num2str(uu),'个分量建模']) 
    X_imf=[X(:,1:end-1),IMF(:,uu)];


    n_in = 5;  % 输入前5个时刻的数据
    n_out = 1 ; % 此程序为单步预测，因此请将n_out设置为1
    or_dim = size(X,2) ;       % 记录特征数据维度
    num_samples = length(X_imf)- n_in; % 样本个数
    scroll_window = 1;  %如果等于1，下一个数据从第二行开始取。如果等于2，下一个数据从第三行开始取
    [res] = data_collation(X_imf, n_in, n_out, or_dim, scroll_window, num_samples);


    % 训练集和测试集划分%% 来自：公众号《淘个代码》

    num_size = 0.8;                              % 训练集占数据集比例  %% 来自：公众号《淘个代码》
    num_train_s = round(num_size * num_samples); % 训练集样本个数  %% 来自：公众号《淘个代码》

    %% 以下几行代码是为了方便归一化，一般不需要更改！
    P_train = res(1: num_train_s,1);
    P_train = reshape(cell2mat(P_train)',n_in*or_dim,num_train_s);
    T_train = res(1: num_train_s,2);
    T_train = cell2mat(T_train)';

    P_test = res(num_train_s+1: end,1);
    P_test = reshape(cell2mat(P_test)',n_in*or_dim,num_samples-num_train_s);
    T_test = res(num_train_s+1: end,2);
    T_test = cell2mat(T_test)';


    %  数据归一化
    [p_train, ps_input] = mapminmax(P_train, 0, 1);
    p_test = mapminmax('apply', P_test, ps_input);

    [t_train, ps_output] = mapminmax(T_train, 0, 1);
    t_test = mapminmax('apply', T_test, ps_output);

    vp_train = reshape(p_train,n_in,or_dim,num_train_s);
    vp_test = reshape(p_test,n_in,or_dim,num_samples-num_train_s);

    vt_train = t_train;
    vt_test = t_test;

    f_ = [size(vp_train,1) size(vp_train,2)];
    outdim = n_out;

    %%  数据平铺 %% 来自：公众号《淘个代码》

    for i = 1:size(P_train,2)
        trainDD{i,:} = (reshape(p_train(:,i),size(p_train,1),1,1));
    end

    for i = 1:size(p_test,2)
        testDD{i,:} = (reshape(p_test(:,i),size(p_test,1),1,1));
    end

% %% WOA
% SearchAgents_no = 6;                   % 数量
% Max_iteration = 12;                    % 最大迭代次数
% dim = 3;                               % 优化参数个数
% lb = [1e-4,10,1e-4];                 % 参数取值下界(学习率，隐藏层节点，正则化系数)
% ub = [1e-1, 100,1e-1];                 % 参数取值上界(学习率，隐藏层节点，正则化系数)
% 
% fitness = @(x)fical(x);
% 
% [Best_score,Best_pos,curve]=WOA(SearchAgents_no,Max_iteration,lb ,ub,dim,fitness);
% 
% Best_pos(1, 2) = round(Best_pos(1, 2)); 
% best_hd  = Best_pos(1, 2); % 最佳隐藏层节点数
% best_lr= Best_pos(1, 1);% 最佳初始学习率
% best_l2 = Best_pos(1, 3);% 最佳L2正则化系数
%%
    targetD =  t_train;
    targetD_test  =  t_test;

    numFeatures = size(p_train,1);

    layers0 = [ ...
        % 输入特征
        sequenceInputLayer([numFeatures,1,1],'name','input')   %输入层设置
        sequenceFoldingLayer('name','fold')         %使用序列折叠层对图像序列的时间步长进行独立的卷积运算。
        % CNN特征提取
        convolution2dLayer([3,1],16,'Stride',[1,1],'name','conv1')  %添加卷积层，64，1表示过滤器大小，10过滤器个数，Stride是垂直和水平过滤的步长
        batchNormalizationLayer('name','batchnorm1')  % BN层，用于加速训练过程，防止梯度消失或梯度爆炸
        reluLayer('name','relu1')       % ReLU激活层，用于保持输出的非线性性及修正梯度的问题
        % 池化层
        maxPooling2dLayer([2,1],'Stride',2,'Padding','same','name','maxpool')   % 第一层池化层，包括3x3大小的池化窗口，步长为1，same填充方式
        % 展开层
        sequenceUnfoldingLayer('name','unfold')       %独立的卷积运行结束后，要将序列恢复
        %平滑层
        flattenLayer('name','flatten')

        bilstmLayer(15,'Outputmode','last','name','hidden1')
        dropoutLayer(0.1,'name','dropout_1')        % Dropout层，以概率为0.2丢弃输入

        fullyConnectedLayer(1,'name','fullconnect')   % 全连接层设置（影响输出维度）（cell层出来的输出层） %
        regressionLayer('Name','output')    ];

    lgraph0 = layerGraph(layers0);
    lgraph0 = connectLayers(lgraph0,'fold/miniBatchSize','unfold/miniBatchSize');


    % Set the hyper parameters for unet training(没有优化算法）
    options0 = trainingOptions('adam', ...                 % 优化算法Adam
        'MaxEpochs', 300, ...                            % 最大训练次数
        'GradientThreshold', 1, ...                       % 梯度阈值
        'InitialLearnRate', 0.001, ...         % 初始学习率
        'LearnRateSchedule', 'piecewise', ...             % 学习率调整
        'LearnRateDropPeriod',260, ...                   % 训练100次后开始调整学习率
        'LearnRateDropFactor',0.01, ...                    % 学习率调整因子
        'L2Regularization', 0.00001, ...         % 正则化参数
        'ExecutionEnvironment', 'cpu',...                 % 训练环境
        'Verbose', 1, ...                                 % 关闭优化过程
        'Plots', 'none');                    % 画出曲线
%   %% SSA
%    %% 指定训练选项SSA
% options0 = trainingOptions('adam', ...
%     'MaxEpochs',round(Best_pos(2)), ...%最大迭代次数
%     'ExecutionEnvironment' ,'cpu',...
%     'GradientThreshold',1, ...
%     'InitialLearnRate',Best_pos(3), ...
%     'LearnRateSchedule','piecewise', ...
%     'LearnRateDropPeriod',round(0.8*Best_pos(2)), ...
%     'LearnRateDropFactor',0.1, ...%指定初始学习率 0.005，在 125 轮训练后通过乘以因子 0.2 来降低学习率
%     'L2Regularization',0.0001,...
%     'Verbose',0);

    %% start training
    %  训练
    net = trainNetwork(trainDD,targetD',lgraph0,options0);
    %analyzeNetwork(net);% 查看网络结构
    %  预测
    t_sim1 = predict(net, trainDD);
    t_sim2 = predict(net, testD);

    %  数据反归一化
    T_sim1 = mapminmax('reverse', t_sim1, ps_output);
    T_sim2 = mapminmax('reverse', t_sim2, ps_output);

    %  数据格式转换
    imf_T_sim1(:,uu) = double(T_sim1);% cell2mat将cell元胞数组转换为普通数组
    imf_T_sim2(:,uu) = double(T_sim2);
end

%% 重构出到真实的测试集与训练集
[res] = data_collation(X, n_in, n_out, or_dim, scroll_window, num_samples);
% 训练集和测试集划分%% 来自：公众号《淘个代码》
%% 以下几行代码是为了方便归一化，一般不需要更改！
T_train = res(1: num_train_s,2);
T_train = cell2mat(T_train)';

T_test = res(num_train_s+1: end,2);
T_test = cell2mat(T_test)';

%% 各分量预测的结果相加
T_sim_a = sum(imf_T_sim1,2);
T_sim_b = sum(imf_T_sim2,2);


% 指标计算
disp('…………训练集误差指标…………')
[mae5,rmse5,mape5,error5]=calc_error(T_train,T_sim_a');
fprintf('\n')

figure('Position',[200,300,600,200])
plot(T_train);
hold on
plot(T_sim_a')
legend('真实值','预测值')
title('CEEMDAN-VMD-CNN-biLSTM训练集预测效果对比')
xlabel('样本点')
ylabel('发电功率')

disp('…………测试集误差指标…………')
[mae6,rmse6,mape6,error6]=calc_error(T_test,T_sim_b');
fprintf('\n')


figure('Position',[200,300,600,200])
plot(T_test);
hold on
plot(T_sim_b')
legend('真实值','预测值')
title('CEEMDAN-VMD-CNN-biLSTM预测集预测效果对比')
xlabel('样本点')
ylabel('发电功率')

figure('Position',[200,300,600,200])
plot(T_sim_b'-T_test)
title('CEEMDAN-VMD-CNN-biLSTM-误差曲线图')
xlabel('样本点')
ylabel('发电功率')

%% 三种模型测试集结果绘图对比

% figure
% plot(YTest,'k','linewidth',3);
% hold on;
% plot(PredictTest,'b','linewidth',3);
% hold on;
% plot(PredictTest_imf,'g','linewidth',3);
% hold on;
% plot(PredictTest_imf0,'r','linewidth',3);
% legend('Target','BILSTM','CNN','CNN-BILSTM');
% title('三种模型测试集结果对比图');
% xlabel('Sample Index');
% xlabel('Wind Speed');
% grid on;

figure
plot(error2,'k','linewidth',3);
hold on
plot(error4,'g','linewidth',3);
hold on
plot(error6,'r','linewidth',3);
legend('BILSTM-Error','CNN-Eoor','CNN-BILSTM-Eoor');
title(['BILSTM-RMSE = ' num2str(rmse2), 'CNN-RMSE = ' num2str(rmse4), 'CNN-BILSTM-RMSE = ' num2str(rmse6)]);
grid on;
toc

