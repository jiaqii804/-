% 此函数可以实现多变量多步输入，和多变量单步输入
% 多变量多步输入时，将n_out设置成大于1的多步预测
% 多变量单步输入时，将n_out设置为1，表示预测未来一步。
% # 关于此函数怎么用，下面详细举例介绍：
% # 构造数据，这个函数可以实现单输入单输出，单输入多输出，多输入单输出，和多输入多输出。
% # 举个例子：
% # 假如原始数据为,其中务必使得数据前n-1列都为特征，最后一列为输出
% # [0.74	0.8	0.23 750.75
% # 0.74 0.87 0.15 716.94
% # 0.74 0.87 0.15 712.77
% # 0.74 0.8 0.15 684.86
% # 0.74 0.8 0.15 728.79
% # 0.72 0.87 0.08 742.81
% # 0.71 0.99 0.16 751.3]
% 
% #（多输入多输出为例），假如n_in = 2，n_out=2，scroll_window=1
% # 输入前2行数据的特征，预测未来2个时刻的数据，滑动步长为1。
% # 使用此函数后，数据会变成：
% # 【0.74 0.8 0.23 750.75  0.74	0.87 0.15 716.94 712.77 684.86
% # 0.74 0.87 0.15 716.94 0.74 0.87	0.15 712.77  684.86 728.79
% # 0.74 0.87 0.15 712.77 0.74 0.8 0.15 684.86 728.79 742.81】
% 
% # 假如n_in = 2，n_out=1，scroll_window=2
% # 输入前2行数据的特征，预测未来1个时刻的数据，滑动步长为2。
% # 使用此函数后，数据会变成：
% # 【0.74 0.8 0.23 750.75  0.74	0.87 0.15 716.94 712.77
% # 0.74 0.87	0.15 712.77  0.74 0.8 0.15 684.86 728.79
% # 0.74 0.8 0.15 728.79 0.72	0.87 0.08 742.81 751.3】




function  res = data_collation(values, n_in, n_out, or_dim, scroll_window, num_samples)
    for i = 1:num_samples
        h1 = values(1+scroll_window*(i-1): scroll_window*(i-1)+n_in,1:or_dim);
        res{i,1}= h1;
        h2 = values(scroll_window*(i-1)+n_in+1 : scroll_window*(i-1)+n_in+n_out,end);
        res{i,2} = h2;
      
    end
 end
